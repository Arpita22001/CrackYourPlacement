                          1->BRUTE FORCE APPROACH
Merge Sort-> TC=O(nlogn) SC=O(n)
class solution{
public:
void merge(vector<int>&nums,int mid, int low, int high){
vector<int>temp;
int left=low;
int right=mid+1;
while(left<=mid && right<=high){
if(nums[left]<=nums[right])
{
temp.push_back(arr[left]);
left++;
}
else
{
temp.push_back(nums[right]);
right++;
}
}
while(left<=mid)
{
temp.push_back(nums[left]);
left++;
}
while(right<=high)
{
temp.push_back(nums[right]);
right++;
}
for(int i=low;i<high;i++)
{
nums[i]=temp[i-low];
}
}

void mS(vector<int>&nums,int low,int high)
{
if(low==high) return;
int mid=(low+high)/2;
ms(nums,low,mid);
ms(nums,mid+1,high);
merge(nums,low,mid,high);
}

void SortColors(vector<int>&nums){
int n=nums.size();
ms(nums,0,n-1);
}
}

          2->OPTIMAL APPROACH 
class Solution {
public:
    void sortColors(vector<int>& nums) {
       int n=nums.size();
       int left=0,right=n-1;
       int i=0;
       while(i<=right)
       {
           if(nums[i]==0)
           {
               swap(nums[i],nums[left]);
               left++;
               i++;
               
           }
           else if(nums[i]==2)
           {
               swap(nums[i],nums[right]);
               right--;
           }
           else
           {
               i++;
           }
           
           
       }
    }
};
       
    





